# -*- coding: utf-8 -*-
"""gtsam-pgo-benchmark.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1w8hQ1v-HtXna--BQHbFQSHqf2-mEcAVF
"""


import gtsam
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from gtsam.utils import plot

def vector6(x, y, z, a, b, c):
    """Create 6d double numpy array."""
    return np.array([x, y, z, a, b, c], dtype=np.float)

datasets = ['sphere_bignoise_vertex3.g2o', 'torus3D.g2o', 'grid3D.g2o', 'parking-garage.g2o', 'cubicle.g2o', 'rim.g2o']
#datasets = ['parking-garage.g2o']

for dataset in datasets:
  print('Dataset: ', dataset)
  graph, initial = gtsam.readG2o(dataset, True)
  priorModel = gtsam.noiseModel_Diagonal.Variances(vector6(1e-6, 1e-6, 1e-6,
                                                          1e-4, 1e-4, 1e-4))
  print("error w/o prior: {:e}".format(graph.error(initial)))
  firstKey = initial.keys().at(0)
  anchorPose = initial.atPose3(firstKey)
  graph.add(gtsam.PriorFactorPose3(firstKey, anchorPose, priorModel))
  print("initial error = ", "{:e}".format(graph.error(initial)))

  initial = gtsam.InitializePose3.initialize(graph, initial, False)
  print("chordal error = ", "{:e}".format(graph.error(initial)))

  # Create parames and set it like in ceres
  params = gtsam.LevenbergMarquardtParams.CeresDefaults()
  params.setVerbosityLM("SUMMARY") # see output in runtime logs !

  # Create LM optimizer
  optimizer = gtsam.LevenbergMarquardtOptimizer(graph, initial, params)
  

  # Iteration loop
  while optimizer.iterations() < params.getMaxIterations():

    currentError = optimizer.error()
    if np.isinf(currentError):
        break

    optimizer.iterate()

    if gtsam.checkConvergence(params.getRelativeErrorTol(), params.getAbsoluteErrorTol(),
                              params.getErrorTol(), currentError, optimizer.error()):
        print('convergence')
        break
        

  # Print info
  print('iterations: ', optimizer.iterations())

  result = optimizer.values()
  print("final error = ", "{:e}".format(graph.error(result)))
 
 
  # Plot result
  resultPoses = gtsam.allPose3s(result)
  for i in range(resultPoses.size()):
      plot.plot_pose3(1, resultPoses.atPose3(i))
  plt.show()
